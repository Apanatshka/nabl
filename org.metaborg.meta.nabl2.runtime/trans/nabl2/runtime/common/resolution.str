module nabl2/runtime/common/resolution

imports

  nabl2/shared/-

  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/pp

  signatures/nabl2/runtime/common/-

signature

  // type Env = (Partial,[(Name,[(Decl,Path)])])

rules

  // nabl2--resolve-all :: Graph -> [(Ref,[(Decl,Path)])]
  nabl2--resolve-all =
    ?g;
    nabl2--G-refs;
    filter(!(<id>,<nabl2--resolve(|g)>))

  // nabl2--resolve(|Graph) :: Ref -|-> [(Decl,Path)]
  nabl2--resolve(|g) =
    nabl2--resolve(|g,[])

rules // resolution internal

  // nabl2--resolve :: Ref -|-> [(Decl,Path)]
  nabl2--resolve(|g,ir*) =
    with(dbg-msg := $[nabl2--resolve(|g,ir*=[<pp-NaBL2-Occurrences> ir*])]);
    with(log-res(pp-NaBL2-Occurrence|$[[dbg-msg]_]));
    ?r;
    ( s := <nabl2--G-ref-scope> (g,r) // :: Scope
   <+ <fatal-err(|"Cannot get scope for reference ")> r
    );
    (f,e*) := <env(nabl2--labels-lt|<nabl2--labels-wf>,g,[r|ir*],[])> s; // :: Env
    ( <lookup> (<nabl2--occurrence-atom> r, e*) // :: [(Decl,Path)]
   <+ where(Total() := f) ; ![]
    ); // :: [(Decl,Path)]
    with(log-res(pp-NaBL2-FullResolveds|$[[dbg-msg]_[<pp-NaBL2-Occurrence> r]_=_]))



  // env(|RE,Graph,[Ref],[Scope]) :: Scope -> Env
  env(lt|re,g,ir*,is*) =
    with(dbg-msg := $[env(|re=[<pp-NaBL2-LabelRE> re],g,ir*[<pp-NaBL2-Occurrences> ir*],is*=[<pp-NaBL2-Scopes> is*])]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    ( (<elem> (s,is*) + <nabl2--emptiness> re)
    < !(Total(),[])
    + <env_L(lt|<nabl2--labels>,re,g,ir*,is*)> s
    );
    with(log-res(pp-NaBL2-Env|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))



  // env(|[Label],RE,Graph,[Ref],[Scope]) :: Scope -> Env
  env_L(lt|L,re,g,ir*,is*) =
    where(<is-list> L);
    with(dbg-msg := $[env^[<pp-NaBL2-Labels> L](|re=[<pp-NaBL2-LabelRE> re],g,ir*=[<pp-NaBL2-Occurrences> ir*],is*=[<pp-NaBL2-Scopes> is*])]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    <nabl2--max-labels> L;
    map(\ l -> <env-shadow> ( <env_L(lt|<lt(|l)> L,re,g,ir*,is*)> s
                            , <env_l(lt|l,re,g,ir*,is*)> s
                            ) \);
    env-unions;
    with(log-res(pp-NaBL2-Env|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))



  // env(|D(),RE,Graph,[Ref],[Scope]) :: Scope -> Env
  env_l(lt|l,re,g,ir*,is*) =
    where(D() := l);
    with(dbg-msg := $[env^D(|re=[<pp-NaBL2-LabelRE> re],g,ir*=[<pp-NaBL2-Occurrences> ir*],is*=[<pp-NaBL2-Scopes> is*])]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    ( Empty() := <nabl2--nullable> re
    < ![]
    + <nabl2--G-decls;map(\ d -> (d,[D(s,d)]) \)> (g,s);
      nabl2--group(Fst;nabl2--occurrence-atom)
    );
    !(Total(),<id>);
    with(log-res(pp-NaBL2-Env|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))



  // env(|Label,RE,Graph,[Ref],[Scope]) :: Scope -> Env
  env_l(lt|l,re,g,ir*,is*) =
    with(dbg-msg := $[env^[<pp-NaBL2-Label> l](|re=[<pp-NaBL2-LabelRE> re],g,ir*=[<pp-NaBL2-Occurrences> ir*],is*=[<pp-NaBL2-Scopes> is*])]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    ( <union> ( <iss(|l,g)> s
              , <irs(|l,g,ir*)> s
              )
    < map({ step:
              ?(<id>,step);
              env(lt|<nabl2--deriv(|l)> re,g,ir*,[s|is*]);
              env-prepend(|step)
         });
      env-unions
    + !(Partial(),[])
    );
    with(log-res(pp-NaBL2-Env|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))

  // iss(|Graph,[Ref]) :: Scope -|-> [(Scope,Step)]
  iss(|l,g) =
    with(dbg-msg := $[iss^[<pp-NaBL2-Label> l](|g)]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    <nabl2--G-direct-edges> (g,s); // :: [(Label,Scope)]
    map(where(Snd;nabl2--is-ground));
    filter(?(l,_);Snd); // :: [Scope]
    map(\ s' -> (s',E(s,l)) \); // :: [(Scope,Step)]
    with(log-res(|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))

  // irs(|Graph,[Ref]) :: Scope -|-> [(Scope,Step)]
  irs(|l,g,ir*) =
    with(dbg-msg := $[irs^[<pp-NaBL2-Label> l](|g,ir*=[<pp-NaBL2-Occurrences> ir*])]);
    with(log-res(pp-NaBL2-Scope|$[[dbg-msg]_]));
    ?s;
    <nabl2--G-named-edges> (g,s); // :: [(Label,Ref)]
    filter(?(l,_);Snd); // :: [Ref]
    filter(where(<not(elem)> (<id>,ir*))); // :: [Ref]
    mapconcat(\ r -> <nabl2--resolve(|g,ir*);
                      nabl2--mapv(\ p -> (r,p) \)> r \); // :: [(Decl,(Ref,Path))]
    filter({ d,r,p,s':
               ?(d,(r,p));
               s' := <nabl2--G-assocs;nabl2--get(|l)> (g,d);
               !(s',N(s,l,r,p))
          }); // :: [(Scope,Step)]
    with(log-res(|$[[dbg-msg]_[<pp-NaBL2-Scope> s]_=_]))



  // shadow :: (Env, Env) -> Env
  env-shadow: ((Total(),e1),(f,e2)) -> (f, e')
    with e' := <nabl2--merge(union,Fst)> (e1,e2)
  env-shadow: (e@(Partial(),_),_) -> e

  // shadow :: [Env] -> Env
  env-unions: e* -> (f,pe)
    with f  := <map(Fst;?Total())<!Total()+!Partial()> e*;
         (t*,p*) := <partition(?(Total(),<id>),?(Partial(),<id>))> e*;
         te := <foldr(![],nabl2--merge(union,union))> t*;
         pe := <foldr(!te,nabl2--merge(isect,union))> p*

  // env-prepend(|Step) = Env -> Env
  env-prepend(|step) = (id,nabl2--mapv(map(\ (d,p) -> (d,[step|p]) \)))

rules

  log-res(s|n) = id // nabl2--log(s|n)
  log-res(|n)  = log-res(id|n)
  log-res(s)   = log-res(s|"")
