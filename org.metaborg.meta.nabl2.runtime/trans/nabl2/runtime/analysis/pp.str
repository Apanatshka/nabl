module nabl2/runtime/analysis/pp

imports

  nabl2/shared/-
  
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-
  nabl2/runtime/pp

  signatures/nabl2/runtime/analysis/-
  pp/nabl2/runtime/analysis/-

rules

  pp-NaBL2-Analysis = nabl2--strict(
    nabl2--abbreviate-Analysis;
    nabl2--sort-Analysis;
    pp-NaBL2(prettyprint-NaBL2-Analysis)
  )

  nabl2--Analysis-order: Files(_) -> -1
  nabl2--Analysis-order: Constraint(_) -> 0
  nabl2--Analysis-order: ResolutionParams(_,_,_) -> 1
  nabl2--Analysis-order: InitialScopeGraph(_) -> 2
  nabl2--Analysis-order: InitialResolution(_) -> 3
  nabl2--Analysis-order: ScopeGraph(_) -> 4
  nabl2--Analysis-order: NameResolution(_) -> 5
  nabl2--Analysis-order: FullNameResolution(_) -> 6
  nabl2--Analysis-order: Properties(_) -> 7
  nabl2--Analysis-order: Substitution(_) -> 9
  nabl2--Analysis-order: SubtypeRelation(_) -> 10
  nabl2--Analysis-order: Errors(_) -> 11
  nabl2--Analysis-order: Warnings(_) -> 12
  nabl2--Analysis-order: Notes(_) -> 13
  nabl2--Analysis-order: AlternativeSolutions(_) -> 99
  nabl2--Analysis-order: _ -> 100

  nabl2--sort-Analysis =
    qsort((nabl2--Analysis-order,nabl2--Analysis-order);lt)

  nabl2--abbreviate-Analysis: analysis -> [Files(entries)|analysis']
  with files := <collect-all(?CVar(<id>,_) + ?Scope(<id>,_) + ?TermIndex(<id>,_));qsort(string-lt)>;
       entries := <map-with-index((!$[f[<int-to-string>]],id))> files;
       subst := <map(\ (idx,file) -> (file,idx) \)> entries;
       let f2i = \ f -> <nabl2--get(|f)> subst \
           subst = CVar(f2i,id) + Scope(f2i,id) + TermIndex(f2i,id)
       in
         analysis' := <bottomup(try(subst))> analysis
       end
