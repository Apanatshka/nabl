module nabl2/runtime/interpreter/frame

imports
  nabl2/runtime/interpreter/frame-api
  nabl2/runtime/interpreter/scopegraph-impl

// FIXME: All named arrows should be meta-functions, once we get better support for overloaded default arrows.

signature

  constructors
    FID : Int -> FrameId {implicit}
    F : Scope * Map(Label, Map(Scope, FrameId)) * Map(Occurrence, Val) -> Frame 
    Heap : Map(FrameId, Frame) -> H {implicit}

//////////////////////////////
// VANILLA FRAMES AND HEAPS //
//////////////////////////////

rules

  // Operations on frames

  SLS(s, ks, slots) :: H Heap(x) -initFrame-> ff:FrameId :: H { ff |--> F(s, ks, slots), x }
  where
    fresh => ff.
    
  f, H Heap(x) |- scopeOf() -scopeOf-> s
  where
  	x[f] => F(s, _, _).
  
  // Dynamic address lookup  
  // FIXME the scope in a step is the scope stepping from, does this function
  //       use it that way?

  f |- [D(_, d)]:Path -lookup-> Addr(f, d).

  f1, h |- [E(s, l)|p]:Path -lookup-> Addr(f3, d)
  where
    f1, h |- linksOf() -linksOf-> ks;
    ks[l][s] => f2;
    f2, h |- p -lookup-> Addr(f3, d).
    
  // Fetching and mutating slot values
    
  f, h |- d:Occurrence -get-> v
  where
    f, h |- slotsOf() -slotsOf-> slots;
    slots[d] => v.

  f |- OV(d, v) :: H Heap(x) -set-> v :: H {f |--> F(s, ks, {d |--> v, slots}), x}
  where
    x[f] => F(s, ks, slots).
  
rules
  
  f, H Heap(x) |- linksOf() -linksOf-> ks
  where
    x[f] => F(_, ks, _).
    
  f, H Heap(x) |- slotsOf() -slotsOf-> slots
  where
    x[f] => F(_, _, slots).

//////////////////////////////
// DEFAULT FRAMES AND HEAPS //
//////////////////////////////

signature
  
  constructors
    DefaultSlots : List(Occurrence) --> Map(Occurrence, Val)

rules

  SL(s, ks) :: H Heap(x) -initDefault-> ff:FrameId :: H { ff |--> F(s, ks, slots), x }
  where
    fresh => ff;
    s -declsOf-> ds;
    DefaultSlots(ds) --> slots.

  DefaultSlots([]) --> {}.

  DefaultSlots([d|ds]) --> { d |--> v, slots }
  where
    d -typeOf-> t;
    t -defaultv-> v;
    DefaultSlots(ds) --> slots.
