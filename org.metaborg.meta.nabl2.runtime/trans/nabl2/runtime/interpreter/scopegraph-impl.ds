module nabl2/runtime/interpreter/scopegraph-impl

imports

  nabl2/runtime/interpreter/scopegraph-api

signature
 
  constructors
    Scope : String * String -> Scope

  constructors
    Occurrence : Namespace * AST * TermIndex -> Occurrence
 
  sorts TermIndex constructors
    TermIndex : String * Int -> TermIndex
 
  sorts Namespace constructors
    DefaultNamespace : Namespace
    Namespace        : String -> Namespace
 
  sorts ScopeGraph ScopeEntry constructors
    G : Map(Scope, ScopeEntry) * Map(Occurrence, Map(Label, Scope)) -> ScopeGraph
    S : List(Occurrence) * List(Occurrence) * List((Label * Scope)) * List((Label * Occurrence)) -> ScopeEntry

  sorts NameResolution constructors
    NR : Map(Occurrence, (Occurrence * Path)) -> NameResolution

  sorts OccurrenceTypes constructors
    OT : Map(Occurrence, Type) -> OccurrenceTypes

  native operators
    nabl2_scopeGraph : AST -> ScopeGraph
    nabl2_nameResolution : AST -> NameResolution
    nabl2_occurrenceTypes : AST -> OccurrenceTypes
    nabl2_indexOf : AST -> TermIndex

  sorts NaBL2 constructors
    NaBL2 : ScopeGraph * NameResolution * OccurrenceTypes -> NaBL2
 
  arrows
    initNaBL2(AST) --> NaBL2

  components
    NaBL2 : NaBL2

rules

  initNaBL2(t) --> NaBL2(SG, NR, OT)
    where nabl2_scopeGraph(t) => SG;
          nabl2_nameResolution(t) => NR;
          nabl2_occurrenceTypes(t) => OT.
 
rules

  t:AST -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(t) => idx.

  (ns, t):(String * AST) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(t) => idx.

  (t, o):(AST * AST) -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(o) => idx.

  (ns, t, o):(String * AST * AST) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(o) => idx.

rules

  NaBL2 NaBL2(G(scopes,_),_,_) |- s:Scope -declsOf-> decls
    where scopes[s] => S(decls,_,_,_).

  NaBL2 NaBL2(G(scopes,_),_,_) |- s:Scope -linksOf-> links
    where scopes[s] => S(_,_,links,_).

  NaBL2 NaBL2(_,NR(entries),_) |- o:Occurrence -pathOf-> p
    where entries[o] => (_,p).

  NaBL2 NaBL2(_,_,OT(entries)) |- o:Occurrence -typeOf-> entries[o].
