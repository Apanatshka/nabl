module nabl2/runtime/interpreter/scopegraph-impl

imports

  nabl2/runtime/interpreter/scopegraph-api

signature
 
  constructors
    Scope : String * String -> Scope

  constructors
    Occurrence : Namespace * Name * TermIndex -> Occurrence
 
  sorts TermIndex constructors
    TermIndex : String * Int -> TermIndex
  
  sorts ScopeGraph ScopeEntry constructors
    G : Map(Scope, ScopeEntry) * Map(Occurrence, Map(Label, Scope)) -> ScopeGraph
    S : List(Occurrence) * List(Occurrence) * List((Label * Scope)) * List((Label * Occurrence)) -> ScopeEntry

  sort aliases
    NameResolution = Map(Occurrence, (Occurrence * Path))
    OccurrenceTypes = Map(Occurrence, Type)

  native operators
    nabl2_scopeGraph : AST -> ScopeGraph
    nabl2_nameResolution : AST -> NameResolution
    nabl2_occurrenceTypes : AST -> OccurrenceTypes
    nabl2_indexOf : AST -> TermIndex

  constructors
    NaBL2 : ScopeGraph * NameResolution * OccurrenceTypes *
      (Map(Occurrence, Scope) *   // Declaration-to-scope map
       Map(Occurrence, Scope)) -> // Reference-to-scope map
        NaBL2
 
  arrows // Auxiliary functions
    filterOccsByNamespace(List(Occurrence), Namespace) --> List(Occurrence)
    declOfPath(List(Step)) --> Occurrence
 
  arrows
    postProcessLinks(List((Label * Scope)), Map(Label, List(Scope))) --> Map(Label, List(Scope))
    postProcessDecls(Map(Scope, ScopeEntry), List(Scope)) --> Map(Occurrence, Scope)
    postProcessRefs(Map(Scope, ScopeEntry), List(Scope)) --> Map(Occurrence, Scope)
    associateOccsWithScope(List(Occurrence), Scope) --> Map(Occurrence, Scope)
 
rules

  initNaBL2(t) --> NaBL2(SG, NR, OT, (d2s, r2s))
    where nabl2_scopeGraph(t) => SG@G(scopes, _);
          nabl2_nameResolution(t) => NR;
          nabl2_occurrenceTypes(t) => OT;
          postProcessDecls(scopes, allkeys(scopes)) --> d2s;
          postProcessRefs(scopes, allkeys(scopes)) --> r2s.
 
rules

  t:Name -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(t) => idx.

  (ns, t):(String * Name) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(t) => idx.

  (t, o):(Name * AST) -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(o) => idx.

  (ns, t, o):(String * Name * AST) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(o) => idx.

rules

  NaBL2 NaBL2(G(scopes,_),_,_,_) |- s:Scope -declsOf-> decls
    where scopes[s] => S(decls,_,_,_).

  NaBL2 NaBL2(G(scopes,_),_,_,_) |- (s, ns):(Scope * Namespace) -declsOf-> filterOccsByNamespace(decls, ns)
    where scopes[s] => S(decls,_,_,_).

  NaBL2 NaBL2(G(scopes,_),_,_,_) |- s:Scope -edgesOf-> postProcessLinks(links, {})
    where scopes[s] => S(_,_,links,_).

  NaBL2 NaBL2(_,NR,_,_) |- o:Occurrence -pathOf-> p
    where NR[o] => (_,p).

  NaBL2 NaBL2(_,_,OT,_) |- o:Occurrence -typeOf-> OT[o].

  NaBL2 NaBL2(G(_, AS), _, _, _) |- (o, l):(Occurrence * Label) -assocScopeOf-> m[l]
  where
    AS[o] => m.
    
  NaBL2 NaBL2(_, _, _, (d2s, _)) |- o:Occurrence -scopeOfDecl-> d2s[o].
    
  NaBL2 NaBL2(_, _, _, (_, r2s)) |- o:Occurrence -scopeOfRef-> r2s[o].

  o:Occurrence -declOfRef-> declOfPath(p)
  where
    o -pathOf-> p.

rules

  declOfPath([D(_, o)]) --> o.

  declOfPath([_|p]) --> declOfPath(p).

rules

  filterOccsByNamespace([], _) --> [].
  
  filterOccsByNamespace([o@Occurrence(ns', _, _)|os], ns) --> [o|filterOccsByNamespace(os, ns)]
  where
    ns == ns'.
    
  filterOccsByNamespace([Occurrence(ns', _, _)|os], ns) --> filterOccsByNamespace(os, ns)
  where
    ns != ns'.

rules // This should probably be done in the NaBL2 back-end instead of DynSem.

  postProcessLinks([], m) --> m.

  postProcessLinks([(l, s)|lss], m) --> postProcessLinks(lss, m')
  where
    case m[l?] of {
      true =>
        { l |--> [s|m[l]] , m } => m'
      otherwise =>
        { l |--> [s], m } => m'
    }.

rules // This should be done in the NaBL2 back-end instead of DynSem.

  postProcessDecls(_, []) --> {}.
  
  postProcessDecls(scope_entries, [s|ss]) --> { m , postProcessDecls(scope_entries, ss) }
  where
    scope_entries[s] => S(decls, _, _, _);
    associateOccsWithScope(decls, s) --> m.

rules // This should be done in the NaBL2 back-end instead of DynSem.

  postProcessRefs(_, []) --> {}.
  
  postProcessRefs(scope_entries, [s|ss]) --> { m , postProcessRefs(scope_entries, ss) }
  where
    scope_entries[s] => S(_, refs, _, _);
    associateOccsWithScope(refs, s) --> m.

rules // This should be done in the NaBL2 back-end instead of DynSem.

  associateOccsWithScope([], _) --> {}.

  associateOccsWithScope([d|ds], s) --> { d |--> s , associateOccsWithScope(ds, s) }.
