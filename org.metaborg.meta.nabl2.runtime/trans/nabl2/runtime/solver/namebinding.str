module nabl2/runtime/solver/namebinding

imports
 
  nabl2shared
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules
 
  solve-fact = time-analysis(solve-scopegraph-fact|"scopegraph")

  solve-scopegraph-fact: (c@CGDecl(d,s),sol) -> [(sol',[])]
  where <is-ground> c
  with g := <sol-g> sol => g;
       g' := <G-with-decl> (g,s,d);
       sol' := <sol-with-g(|g')> sol

  solve-scopegraph-fact: (c@CGRef(r,s),sol) -> [(sol',[])]
  where <is-ground> c
  with g := <sol-g> sol;
       g' := <G-with-ref> (g,s,r);
       sol' := <sol-with-g(|g')> sol

  solve-scopegraph-fact: (CGDirectEdge(s,l,s'),sol) -> [(sol',[])]
  where <is-ground> (s,l);
        <is-ground + is-var> s'
  with g := <sol-g> sol;
       g' := <G-with-direct-edge> (g,s,(l,s'));
       sol' := <sol-with-g(|g')> sol

  solve-scopegraph-fact: (c@CGNamedEdge(r,l,s),sol) -> [(sol',[])]
  where <is-ground> c
  with g := <sol-g> sol;
       g' := <G-with-named-edge> (g,s,(l,r));
       sol' := <sol-with-g(|g')> sol

  solve-scopegraph-fact: (c@CGAssoc(d,l,s),sol)    -> [(sol',[])]
  where <is-ground> c
  with g := <sol-g> sol;
       g' := <G-with-assoc> (g,d,(l,s));
       sol' := <sol-with-g(|g')> sol

  constraint-priority: CGDecl(_,_) -> 3
  constraint-priority: CGRef(_,_) -> 3
  constraint-priority: CGDirectEdge(_,_,_) -> 3
  constraint-priority: CGNamedEdge(_,_,_) -> 3
  constraint-priority: CGAssoc(_,_,_) -> 3

rules

  solve-constraint = time-analysis(solve-namebinding-constraint|"namebinding")

  solve-namebinding-constraint: (CResolve(r,d,msginfo),sol) -> res*
  where <is-ground> r;
        if (d',_) := <sol-r;get(|r)> sol then
           msg := ["Cannot resolve ",r," to ",d];
           msginfo' := <default-message(|msg)> msginfo;
           ![(sol, [CEqual(d,d',msginfo')])]
         else
           if dp* := <sol-fr;get(|r)> sol then
             !sol
           else
             dp* := <resolve(|<sol-g> sol)> r;
             <sol-set-fr(|r,dp*)> sol
           end => sol';
           if [] := dp* then
             msg := [r," does not resolve to any declaration"];
             ![(<add-message(detail-message(|msg)|msginfo)> sol',[])]
           else
             msg := ["Problem resolving ",r," to ",d];
             msginfo' := <default-message(|msg)> msginfo;
             <map(\ (d',p) -> (<sol-set-r(|r,(d',p))> sol', [CEqual(d,d',msginfo')]) \)> dp*
           end
         end => res*

  solve-namebinding-constraint: (CAssoc(d,l,s,msginfo),sol) -> [res]
  where <is-ground> d;
        g := <sol-g> sol
  with ( s' := <G-assocs;get(|l)> (g,d)
       < msg := ["Problem associating scope ",s," with ",d]
       ; !(sol,[CEqual(s,s',<default-message(|msg)> msginfo)])
       + msg := [d," is not associated with a ",l," scope"]
       ; sol' := <add-message(detail-message(|msg)|msginfo)> sol
       ; !(sol',[])
       ) => res
 
rules

  is-op = is-NaBL2-Names

  reduce-op(|sol) = get-names(|<sol-g> sol)

  elems-pos(|x*): NAMES() -> x*

  elems-rep(|x*): NAMES() -> r*
    with r* := <map(occurrence-name)> x*

rules

  constraint-priority: CAssoc(_,_,_,_) -> 4
  constraint-priority: CResolve(_,_,_) -> 4

rules
 
  unresolved-refs-errors: sol -> sol'
    with g := <sol-g> sol;
         fr* := <sol-fr> sol;
         ref* := <G-refs> g;
         res* := <sol-r;keys> sol;
         ar* := <diff> (<keys> fr*, res*);
         ur* := <diff> (ref*,[res*,ar*]);
         sol' := <foldr(!sol,{ ?(r,<id>) ; add-message(id|Message(Error(),["Failed to resolve ",r],<occurrence-index> r)) })> ur*
 
  constraint-message: CResolve(r,_,msginfo) -> <default-message(|["Failed to resolve ",r])> msginfo

  constraint-message: CAssoc(d,l,_,msginfo) -> <default-message(|["Failed to find associated scope of ",d," with label ",l])> msginfo

