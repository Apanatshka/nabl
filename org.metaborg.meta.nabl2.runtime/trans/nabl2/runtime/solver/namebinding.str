module nabl2/runtime/solver/namebinding

imports
 
  nabl2/shared/-
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules
 
  nabl2--solve-fact = nabl2--time-analysis(!"scopegraph",nabl2--solve-scopegraph-fact)

  nabl2--solve-scopegraph-fact: (c@CGDecl(d,s),sol) -> [(sol',[])]
  where <nabl2--is-ground> c
  with g := <nabl2--sol-g> sol => g;
       g' := <nabl2--G-with-decl> (g,s,d);
       sol' := <nabl2--sol-with-g(|g')> sol

  nabl2--solve-scopegraph-fact: (c@CGRef(r,s),sol) -> [(sol',[])]
  where <nabl2--is-ground> c
  with g := <nabl2--sol-g> sol;
       g' := <nabl2--G-with-ref> (g,s,r);
       sol' := <nabl2--sol-with-g(|g')> sol

  nabl2--solve-scopegraph-fact: (CGDirectEdge(s,l,s'),sol) -> [(sol',[])]
  where <nabl2--is-ground> (s,l);
        <nabl2--is-ground + nabl2--is-var> s'
  with g := <nabl2--sol-g> sol;
       g' := <nabl2--G-with-direct-edge> (g,s,(l,s'));
       sol' := <nabl2--sol-with-g(|g')> sol

  nabl2--solve-scopegraph-fact: (c@CGNamedEdge(r,l,s),sol) -> [(sol',[])]
  where <nabl2--is-ground> c
  with g := <nabl2--sol-g> sol;
       g' := <nabl2--G-with-named-edge> (g,s,(l,r));
       sol' := <nabl2--sol-with-g(|g')> sol

  nabl2--solve-scopegraph-fact: (c@CGAssoc(d,l,s),sol)    -> [(sol',[])]
  where <nabl2--is-ground> c
  with g := <nabl2--sol-g> sol;
       g' := <nabl2--G-with-assoc> (g,d,(l,s));
       sol' := <nabl2--sol-with-g(|g')> sol

rules

  nabl2--solve-constraint =nabl2--time-analysis(!"namebinding",nabl2--solve-namebinding-constraint)

  nabl2--solve-namebinding-constraint: (CResolve(r,d,msginfo),sol) -> res*
  where <nabl2--is-ground> r;
        if (d',_) := <nabl2--sol-r;nabl2--get(|r)> sol then
           msg := ["Cannot resolve ",r," to ",d];
           msginfo' := <nabl2--default-message(|msg)> msginfo;
           ![(sol, [CEqual(d,d',msginfo')])]
         else
           if dp* := <nabl2--sol-fr;nabl2--get(|r)> sol then
             !sol
           else
             dp* := <nabl2--resolve(|<nabl2--sol-g> sol)> r;
             <nabl2--sol-set-fr(|r,dp*)> sol
           end => sol';
           if [] := dp* then
             msg := [r," does not resolve to any declaration"];
             ![(<nabl2--add-message(nabl2--detail-message(|msg)|msginfo)> sol',[])]
           else
             msg := ["Problem resolving ",r," to ",d];
             msginfo' := <nabl2--default-message(|msg)> msginfo;
             <map(\ (d',p) -> (<nabl2--sol-set-r(|r,(d',p))> sol', [CEqual(d,d',msginfo')]) \)> dp*
           end
         end => res*

  nabl2--solve-namebinding-constraint: (CAssoc(d,l,s,msginfo),sol) -> [res]
  where <nabl2--is-ground> d;
        g := <nabl2--sol-g> sol
  with ( s' := <nabl2--G-assocs;nabl2--get(|l)> (g,d)
       < msg := ["Problem associating scope ",s," with ",d]
       ; !(sol,[CEqual(s,s',<nabl2--default-message(|msg)> msginfo)])
       + msg := [d," is not associated with a ",l," scope"]
       ; sol' := <nabl2--add-message(nabl2--detail-message(|msg)|msginfo)> sol
       ; !(sol',[])
       ) => res
 
rules

  nabl2-is-op-hook = is-NaBL2-Names

  nabl2-reduce-op-hook(|sol) = nabl2--get-names(|<nabl2--sol-g> sol)

  nabl2--elems-pos(|x*): NAMES() -> x*

  nabl2--elems-rep(|x*): NAMES() -> r*
    with r* := <map(nabl2--occurrence-name)> x*

rules

  nabl2--constraint-priority: CAssoc(_,_,_,_) -> 2
  nabl2--constraint-priority: CResolve(_,_,_) -> 2

rules
 
  nabl2-ignore-unused-references-hook = fail

  nabl2--unresolved-refs-errors: sol -> sol'
    withnabl2--time-analysis(!"namebinding",
         g := <nabl2--sol-g> sol;
         ref* := <nabl2--G-refs> g;
         res* := <nabl2--sol-fr;nabl2--keys> sol;
         unknown* := <diff> (ref*, res*);
         sol' := <foldr(!sol,{ ref,sol, dp*:
           ?(ref,sol);
           dp* := <nabl2--resolve(|g)<+![]> ref;
           <nabl2--sol-set-fr(|ref,dp*)> sol;
           if [] := dp*; <not(nabl2--occurrence-ns;nabl2-ignore-unused-references-hook)> ref then
             nabl2--add-message(id|Message(Error(),["Failed to resolve ",ref],<nabl2--occurrence-index> ref))
           end
         })> unknown*
    )
 
  nabl2--constraint-message: CResolve(r,_,msginfo) -> <nabl2--default-message(|["Failed to resolve ",r])> msginfo

  nabl2--constraint-message: CAssoc(d,l,_,msginfo) -> <nabl2--default-message(|["Failed to find associated scope of ",d," with label ",l])> msginfo

