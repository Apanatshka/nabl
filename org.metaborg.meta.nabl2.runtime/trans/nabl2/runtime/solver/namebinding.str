module nabl2/runtime/solver/namebinding

imports
 
  nabl2shared
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules
 
  solve-fact: (c@CGDecl(d,s),sol) -> [(sol',[])]
  where <is-ground> c
  with <sol-g> sol => g
     ; <G-with-decl> (g,s,d) => g'
     ; <sol-with-g(|g')> sol => sol'

  solve-fact: (c@CGRef(r,s),sol) -> [(sol',[])]
  where <is-ground> c
  with <sol-g> sol => g
     ; <G-with-ref> (g,s,r) => g'
     ; <sol-with-g(|g')> sol => sol'

  solve-fact: (CGDirectEdge(s,l,s'),sol) -> [(sol',[])]
  where <is-ground> (s,l);
        <is-ground + is-var> s'
  with <sol-g> sol => g
     ; <G-with-direct-edge> (g,s,(l,s')) => g'
     ; <sol-with-g(|g')> sol => sol'

  solve-fact: (c@CGNamedEdge(r,l,s),sol) -> [(sol',[])]
  where <is-ground> c
  with <sol-g> sol => g
     ; <G-with-named-edge> (g,s,(l,r)) => g'
     ; <sol-with-g(|g')> sol => sol'

  solve-fact: (c@CGAssoc(d,l,s),sol)    -> [(sol',[])]
  where <is-ground> c
  with <sol-g> sol => g
     ; <G-with-assoc> (g,d,(l,s)) => g'
     ; <sol-with-g(|g')> sol => sol'

  constraint-priority: CGDecl(_,_) -> 3
  constraint-priority: CGRef(_,_) -> 3
  constraint-priority: CGDirectEdge(_,_,_) -> 3
  constraint-priority: CGNamedEdge(_,_,_) -> 3
  constraint-priority: CGAssoc(_,_,_) -> 3

rules

  solve-constraint: (CResolve(r,d,msginfo),sol) -> [(sol,c*)]
  where <is-ground> r;
        dp := <sol-r;get(|r)> sol
  with ( None() := dp
       < ![]
       + (d',p) := dp
       ; msg := ["Cannot resolve ",r," to ",d]
       ; msginfo' := <default-message(|msg)> msginfo
       ; ![ CEqual(d,d',msginfo') ]
       ) => c*

  solve-constraint: (CResolve(r,d,msginfo),sol) -> res*
  where <is-ground> r;
        <sol-r;not(get(|r))> sol;
        g := <sol-g> sol;
        dl* := <resolve(|g)> r
  with ( [] := dl*
       < msg := [r," does not resolve to any declaration"]
       ; sol' := <sol-set-r(|r,None());
                  add-message(detail-message(|msg)|msginfo)> sol
       ; ![ (sol',[]) ]
       + msg := ["Problem resolving ",r," to ",d]
       ; msginfo' := <default-message(|msg)> msginfo
       ; <map(solve-namebinding-constraint-step(|r,d,msginfo',sol))> dl*
       ) => res*

  solve-namebinding-constraint-step(|r,d,msginfo,sol): (d',p) -> (sol',c*)
  with <sol-set-r(|r,(d',p))> sol => sol'
  with c* := [ CEqual(d,d',msginfo) ]
 
  solve-constraint: (CAssoc(d,l,s,msginfo),sol) -> [res]
  where <is-ground> d;
        g := <sol-g> sol
  with ( s' := <G-assocs;get(|l)> (g,d)
       < msg := ["Problem associating scope ",s," with ",d]
       ; !(sol,[CEqual(s,s',<default-message(|msg)> msginfo)])
       + msg := [d," is not associated with a ",l," scope"]
       ; sol' := <add-message(detail-message(|msg)|msginfo)> sol
       ; !(sol',[])
       ) => res
 
rules

  is-op = is-NaBL2-Names

  reduce-op(|sol) = get-names(|<sol-g> sol)

  elems-pos(|x*): NAMES() -> x*

  elems-rep(|x*): NAMES() -> r*
    with r* := <map(occurrence-name)> x*

rules

  constraint-priority: CAssoc(_,_,_,_) -> 4
  constraint-priority: CResolve(_,_,_) -> 4

rules
 
  unresolved-refs(|rn*): sol -> sol'
    with ref* := <sol-g;G-refs> sol
       ; res* := <sol-r;keys> sol
       ; ar* := <diff> (<keys> rn*, res*)
       ; ur* := <diff> (ref*,[res*,ar*])
       ; sol' := <foldr(!sol,{ ?(r,<id>) ; add-message(id|Message(Error(),["Failed to resolve ",r],<occurrence-index> r)) })> ur*
 
  constraint-message: CResolve(r,_,msginfo) -> <default-message(|["Failed to resolve ",r])> msginfo

  constraint-message: CAssoc(d,l,_,msginfo) -> <default-message(|["Failed to find associated scope of ",d," with label ",l])> msginfo

