module nabl2/runtime/solver/equality

imports

  nabl2/shared/-
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules
 
  nabl2--solve-constraint =nabl2--time-analysis(!"equality",nabl2--solve-equality-constraint) 
 
  nabl2--solve-equality-constraint: (CEqual(t1,t2,msginfo),sol) -> [(sol,[])]
  where <nabl2--term-eq> (t1,t2)

  nabl2--solve-equality-constraint: (CEqual(v,t,msginfo),sol) -> [(sol',[])]
  where <nabl2--is-var> v;
        <not(nabl2--var-occurs)> (v,t);
        <nabl2--is-reduced> t
  with sol' := <nabl2--sol-apply-s(|[(v,t)])> sol
  
  nabl2--solve-equality-constraint: (CEqual(t,v,msginfo),sol) -> [(sol,[CEqual(v,t,msginfo)])]
  where <not(nabl2--is-var)> t;
        <nabl2--is-var> v

  nabl2--solve-equality-constraint: (CEqual(v,t,msginfo),sol) -> [(sol',[])]
  where <nabl2--is-var> v;
        <nabl2--var-occurs> (v,t)
  with msg := [v," occurs in ",t];
       sol' := <nabl2--add-message(nabl2--detail-message(|msg)|msginfo)> sol
 
  nabl2--solve-equality-constraint: (CEqual(t1@c1#(a1),t2@c2#(a2),msginfo),sol) -> [(sol',[])]
  where <not(nabl2-is-op-hook)> t1;
        <not(nabl2-is-op-hook)> t2;
        ( <not(nabl2--term-eq)> (c1,c2) 
       <+ <(length,length);not(eq)> (a1,a2)
        )
  with msg := <nabl2--default-unify-error(|t1,t2)>;
       sol' := <nabl2--add-message(nabl2--detail-message(|msg)|msginfo)> sol

  nabl2--solve-equality-constraint: (CEqual(t1@c#(a1),t2@c#(a2),msginfo),sol) -> [(sol,C*)]
  where <not(nabl2-is-op-hook)> t1;
        <(length,length);eq> (a1,a2)
  with msg := <nabl2--default-unify-error(|t1,t2)>;
       msginfo' := <nabl2--default-message(|msg)> msginfo;
       C* := <zip(!CEqual(<Fst>,<Snd>,msginfo'))> (a1,a2)


  nabl2--solve-equality-constraint: (CInequal(t1,t2,msginfo),sol) -> [(sol',[])]
  where <nabl2--is-ground> t1;
        <nabl2--is-ground> t2
  with ( <nabl2--term-eq> (t1,t2)
       < msg := [t1," and ",t2," are equal"];
         <nabl2--add-message(nabl2--detail-message(|msg)|msginfo)> sol
       + !sol
       ) => sol'


rules

  nabl2--constraint-priority: CEqual(_,_,_) -> 1
  nabl2--constraint-priority: CInequal(_,_,_) -> 99

rules

  nabl2--default-unify-error(|t1,t2) = !["Cannot not unify ",t1," with ",t2]

  nabl2--constraint-message: CEqual(t1,t2,msginfo) -> <nabl2--default-message(|<nabl2--default-unify-error(|t1,t2)>)> msginfo
  nabl2--constraint-message: CInequal(t1,t2,msginfo) -> <nabl2--default-message(|["Terms ",t1," and ",t2,"cannot be equal"])> msginfo
