module nabl2/runtime/solver/normalization

imports

  nabl2/shared/-
  signatures/nabl2/shared/constraints/-
  signatures/nabl2/runtime/solver/-

rules

  nabl2--normalize-constraint =
    nabl2--flatten-junctions

  
  nabl2--flatten-junctions = bottomup(try(nabl2--flatten-conj + nabl2--flatten-disj))
  
  nabl2--flatten-conj: CConj(CConj(C1*),CConj(C2*)) -> CConj([C1*,C2*])
  nabl2--flatten-conj: CConj(CConj(C1*),C2) -> CConj([C1*,C2])
  nabl2--flatten-conj: CConj(C1,CConj(C2*)) -> CConj([C1,C2*])
  nabl2--flatten-conj: CConj(C1,C2) -> CConj([C1,C2])
  nabl2--flatten-conj: CConj(C*) -> CConj([C1*,C2*])
    with (C1*,C2*) := <partition(?CConj(<id>));(concat,id)> C*

  nabl2--flatten-disj: CDisj(CDisj(C1*),CDisj(C2*)) -> CDisj([C1*,C2*])
  nabl2--flatten-disj: CDisj(CDisj(C1*),C2) -> CDisj([C1*,C2])
  nabl2--flatten-disj: CDisj(C1,CDisj(C2*)) -> CDisj([C1,C2*])
  nabl2--flatten-disj: CDisj(C1,C2) -> CDisj([C1,C2])
  nabl2--flatten-disj: CDisj(C*) -> CDisj([C1*,C2*])
    with (C1*,C2*) := <partition(?CDisj(<id>));(concat,id)> C*


  nabl2--in-junctions(s) = topdown(try(CConj(s) + CDisj(s)))

