module nabl2/runtime/solver/properties

imports

  nabl2/shared/-
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-
 
rules
 
  nabl2--solve-constraint = nabl2--time-analysis(!"properties",nabl2--solve-property-constraint)

  nabl2--solve-property-constraint: (CPropertyOf(o,key,val,prio,msginfo),sol) -> [res]
  where <nabl2--is-ground> o
  with if (val',(prio',msginfo')) := <nabl2--sol-p;nabl2--get(|o);nabl2--get(|key)> sol then
         if <nabl2--priority-gt> (prio,prio') then
           !(<nabl2--sol-add-p(|o,key,(val,(prio,msginfo)))> sol, [CEqual(val, val', msginfo')])
         else
           !(sol, [CEqual(val, val', msginfo)])
         end
       else
         !(<nabl2--sol-add-p(|o,key,(val,(prio,msginfo)))> sol, [])
       end => res

  nabl2--priority-gt = nabl2--strict((string-length,string-length));gt

rules

  nabl2-is-op-hook = ?TList(_) + ?TListTail(_,_) + ?TListConc(_,_)

  nabl2-reduce-op-hook(|sol): TList(xs) -> xs
    where <is-list> xs

  nabl2-reduce-op-hook(|sol): TListTail(xs,ys) -> <conc> (xs,ys)
    where <is-list> xs;
          <is-list> ys

  nabl2-reduce-op-hook(|sol): TListConc(xs,ys) -> <conc> (xs,ys)
    where <is-list> xs;
          <is-list> ys

rules

  nabl2--constraint-priority: CPropertyOf(_,_,_,_,_) -> 3

  nabl2--constraint-message: CPropertyOf(o,key,_,_,msginfo) -> <nabl2--default-message(|["Failed to get ",key," of ",o])> msginfo
