module nabl2/runtime/solver/base

imports

  nabl2/shared/-

  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules
	
  nabl2--solve-fact = fail
  
  nabl2--solve-constraint = fail	
	
  nabl2--constraint-priority = fail	
	
rules

  nabl2--initial-solution = nabl2--sol-new

	solve-ignore-placeholders: (c,sol) -> [(sol,[])]
	where <is-NaBL2-PrimitiveConstraint;
	       nabl2--has-placeholder> c

  nabl2--has-placeholder =
    not(?Message(_,_,_));
    (is-SDF-placeholder <+ one(nabl2--has-placeholder))

  nabl2--solve-facts =
    nabl2--csolve-exhaustive(nabl2--time-analysis(!"specialize",nabl2--solve-specialise)
                     , solve-ignore-placeholders + nabl2--solve-fact
                     , id
                     , nabl2--solve-cost
                     , nabl2--constraint-lt
                     )

  nabl2--solve-constraints =
    nabl2--csolve-greedy(nabl2--time-analysis(!"specialize",nabl2--solve-specialise)
                 , solve-ignore-placeholders + nabl2--solve-constraint
                 , postprocess-errors
                 , nabl2--solve-cost
                 , nabl2--constraint-lt
                 )

  nabl2--solve-specialise: (sol,c) -> res
  with <nabl2--sol-s> sol => s*
     ; <nabl2--S-apply(nabl2--is-var)> (s*,c) => c'
     ; {| ReduceErrors:
            rules(ReduceErrors : _ -> [])
          ; <bottomup(try(nabl2-reduce-op-hook(|sol)))> c' => c''
          ; re* := <ReduceErrors>
          ; if [] := re*
            then
              !(sol,c'')
            else
              msg' := <nabl2--get-constraint-message> c'
            ; msg'' := <foldr(!msg',{ ?(re,<id>) ; nabl2--detail-message(|re) })> re*
            ; sol' := <nabl2--add-message(id|msg'')> sol
            ; !(sol',CTrue())
            end
       |} => res

  nabl2--add-reduce-error =
    ?msg;
    where(msg* := <ReduceErrors>;
          rules(ReduceErrors : _ -> [msg|msg*]))

  nabl2--solve-cost =
    nabl2--strict(Fst; nabl2--sol-e; length)

rules
 
  nabl2--solve-fact = nabl2--time-analysis(!"base",nabl2--solve-base-fact) 
  nabl2--solve-constraint = nabl2--time-analysis(!"base",nabl2--solve-base-constraint) 
 
  nabl2--solve-base-fact = nabl2--solve-junction

  nabl2--solve-base-constraint: (CTrue(),sol) -> [(sol,[])]
  nabl2--solve-base-constraint: (CFalse(msginfo),sol) -> [(sol',[])]
    with msg  := "False never succeeds";
         sol' := <nabl2--add-message(nabl2--default-message(|msg)|msginfo)> sol
  nabl2--solve-base-constraint = nabl2--solve-junction

  nabl2--solve-junction: (CConj(c*),sol) -> [(sol,c*)]
  nabl2--solve-junction: (CDisj(c*),sol) -> <map(\ c -> (sol,[c]) \)> c*
 
  nabl2--constraint-priority: CTrue() -> 0
  nabl2--constraint-priority: CFalse(_) -> 0
  nabl2--constraint-priority: CConj(_) -> 0
  nabl2--constraint-priority: CDisj(_) -> 99

rules

  nabl2--constraint-lt =
    nabl2--strict((nabl2--constraint-priority-or-default,nabl2--constraint-priority-or-default));
    lt
  
  nabl2--constraint-priority-or-default = nabl2--constraint-priority <+ !99

rules
 
  nabl2--debug-solve(s): i@(c,sol) -> o*
    with <debug> $[solve [<pp-NaBL2-Constraint> c]]
    where if o* := <s> i then
            <with(map(Snd;debug;map(pp-NaBL2-Constraint);debug(!"--> ")))> o*
          else
            <debug> "--> (unsolved)"; fail
          end

