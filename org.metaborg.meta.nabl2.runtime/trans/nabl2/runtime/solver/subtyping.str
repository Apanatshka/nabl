module nabl2/runtime/solver/subtyping

imports

  nabl2/shared/-

  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/solver/-

rules

  nabl2--solve-constraint =nabl2--time-analysis(!"subtype",nabl2--solve-subtype-constraint)

  nabl2--solve-subtype-constraint: (f@FSubtype(ty1,ty2,msginfo),sol) -> [(sol',[])]
  where <nabl2--is-ground> (ty1,ty2)
  with <nabl2--sol-x> sol => x*
     ; ( <nabl2--extend-subtype-relation(|x*)> (ty1,ty2) => x'*
       < <nabl2--sol-set-x(|x'*)> sol
       + msg := ["Setting ",ty1," as a subtype of ",ty2," creates invalid subtype relation."];
         <nabl2--add-message(nabl2--default-message(|msg)|msginfo)> sol
       ) => sol'

  nabl2--solve-subtype-constraint: (CSubtype(ty1,ty2,msginfo),sol) -> [(sol,[])]
  where <nabl2--is-ground> (ty1,ty2);
        x* := <nabl2--sol-x> sol;
        <nabl2--is-subtype(|x*)> (ty1,ty2)

rules

  nabl2--postprocess-constraint = nabl2--postprocess-subtype-constraint

  nabl2--postprocess-subtype-constraint: (FSubtype(ty1,ty2,msginfo), sol) -> sol'
  with msg := ["Failed to set ",ty1," is a subtype of ",ty2];
       sol' := <nabl2--add-message(nabl2--default-message(|msg)|msginfo)> sol

  nabl2--postprocess-subtype-constraint: (CSubtype(ty1,ty2,msginfo), sol) -> sol'
  with if <nabl2--is-ground> ty1;
          <nabl2--is-ground> ty2 then
         msg := [ty1," is not a subtype of ",ty2]
       else
         msg := ["Failed to check if ",ty1," is a subtype of ",ty2]
       end;
       sol' := <nabl2--add-message(nabl2--default-message(|msg)|msginfo)> sol

rules

  nabl2--constraint-priority: FSubtype(_,_,_) -> 3
  nabl2--constraint-priority: CSubtype(_,_,_) -> 4

