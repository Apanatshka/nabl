module nabl2/api

imports

  nabl2/shared/-
  nabl2/runtime/-
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/editor/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules // ###### Custom type operations ######

  /**
   * Succeed if the term is a type operation that needs to be reduced
   *
   * @type Term -> _
   */
  nabl2-is-op-hook = fail

  /**
   * Reduce a type operation. Make sure to implement `nabl2-is-op-hook` for all
   * constructors that you reduce.
   *
   * @param a : Analysis (can be incomplete!)
   * @type TypeOp -> Type
   */
  nabl2-reduce-op-hook(|a) = fail

  /**
   * Produce an error during type operation reduction.
   *
   * @type (Term,String) -> _
   */
  nabl2-add-reduce-error = nabl2--add-reduce-error


  /**
   * By default the subtyping relation only allows one direct supertype per type.
   * For types where this strategy succeeds, multiple direct supertypes are allowed.
   * For example, if you have a built-in bottom or null type, you could use
   *
   *     nabl2-allow-multiple-supertypes-hook = ?Bottom()
   *
   * or, if multiple inheritance is allowed for all user defined types as well,
   *
   *     nabl2-allow-multiple-supertypes-hook = id
   * 
   * @type Type -> _
   */
  nabl2-allow-multiple-supertypes-hook = fail

rules // ###### Analysis execution ######

  /**
   * Control the logging of analysis phases. If the strategy succeeds (id),
   * analysis shows the main steps, if it fails (fail) analysis is silent.
   *
   * @type _ -> _
   */
  nabl2-debug-analysis-hook = fail

  /**
   * Control the logging of constraint generation. If the strategy succeeds (id),
   * constraint generation is logged, if it fails (fail) constraint generation
   * is silent.
   *
   * @type _ -> _
   */
  nabl2-debug-constraint-generation-hook = fail

  /**
   * Control implicit traversal of the constraint generation. If the stragegy
   * succeeds (id), children are implicitly traversed if no rule for a constructor
   * is defined. If it fails, children are not traversed implicitly, and a warning
   * is generated.
   * 
   * Implicit traversal only works if the node does not have a type parameter. A
   * warning is always generated when there is no rule for a typed node.
   *
   * @type _ -> _
   */
  nabl2-constraint-generation-implicit-traversal-hook = fail

  /**
   * Control whether to resolve unused references. If the strategy succeeds for
   * its namespace argument, an error is generated if the reference does not resolve.
   * 
   * @type ns -> _
   */
  nabl2-resolve-unused-references-hook = fail

  /**
   * Main analysis strategy for NaBL2.
   *
   * @param pre : Term -> Term Strategy to preprocess (e.g. desugar) AST
   */
  nabl2-analyze(pre) = nabl2--analyze(pre)

  /**
   * Dummy analysis function for NaBL2.
   */
  nabl2-null-analysis = nabl2--null-analysis


rules // ###### Custom analysis hooks ######

  /**
   * @type resource:String -> CustomInitialResult
   */
  nabl2-custom-analysis-init-hook = fail

  /**
   * @type (resource:String, ast:Term, CustomInitialResult) -> CustomUnitResult
   */
  nabl2-custom-analysis-unit-hook = fail

  /**
   * @param a : Analysis
   * @type (resource:String, CustomInitialResult, List(CustomUnitResult))
   *         -> (errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage), CustomFinalResult)
   */
  nabl2-custom-analysis-final-hook(|a) = fail

  /**
   * @type Analysis -> CustomFinalResult
   */
  nalb2-get-custom-analysis = nabl2--get-custom-analysis

  /**
   * @type CustomFinalResult -> Box
   */
  nabl2-prettyprint-custom-analysis-hook = fail

rules // ###### Analysis results ######

  /**
   * Get analysis for the given AST node
   *
   * @type node:Term -> Analysis
   */
  nabl2-get-ast-analysis = nabl2--get-ast-analysis

  /**
   * Get analysis for the given resource
   *
   * @type filename:String -> Analysis
   */
  nabl2-get-resource-analysis = nabl2--get-resource-analysis

  /**
   * @type node:Term -> Term
   */
  nabl2-get-ast-params =
    where(a := <nabl2--get-ast-analysis>);
    nabl2--get-ast-params(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> Term
   */
  nabl2-get-ast-params(|a) = nabl2--get-ast-params(|a)

  /**
   * @type node:Term -> Type
   */
  nabl2-get-ast-type =
    where(a := <nabl2--get-ast-analysis>);
    nabl2--get-ast-type(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> Type
   */
  nabl2-get-ast-type(|a) = nabl2--get-ast-type(|a)

  /**
   * @type node:Term -> List(Occurrence)
   */
  nabl2-get-ast-refs = nabl2--get-ast-refs

  /**
   * @param a : Analysis
   * @type decl:Occurrence -> Type
   */
  nabl2-get-type(|a) = nabl2--get-type(|a)

  /**
   * @param a : Analysis
   * @param prop : String
   * @type decl:Occurrence -> Term
   */
  nabl2-get-property(|a,prop) = nabl2--get-property(|a,prop)

  /**
   * @param a : Analysis
   * @type ref:Occurrence -> (decl:Occurrence, Path)
   */
  nabl2-get-resolved-name(|a) = nabl2--get-resolved-name(|a)



rules // ###### Scope graphs ######

  /**
   * Get all declarations in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-decls(|a) = <nabl2--sol-g;nabl2--G-decls> a

  /**
   * Get all references in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-refs(|a) = <nabl2--sol-g;nabl2--G-refs> a

  /**
   * Get all scopes in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Scope)
   */
  nabl2-get-all-scopes(|a) = <nabl2--sol-g;nabl2--G-scopes> a

  /**
   * Get the scope of a reference
   *
   * @param a : Analysis
   * @type ref:Occurrence -> Scope
   */
  nabl2-get-ref-scope(|a) = <nabl2--G-ref-scope> (<nabl2--sol-g> a, <id>)

  /**
   * Get the scope of a declaration
   *
   * @param a : Analysis
   * @type decl:Occurrence -> Scope
   */
  nabl2-get-decl-scope(|a) = <nabl2--G-decl-scope> (<nabl2--sol-g> a, <id>)

  /**
   * Get declarations in a scope
   *
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-scope-decls(|a) = <nabl2--G-decls> (<nabl2--sol-g> a, <id>)

  /**
   * Get references in a scope
   *
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-scope-refs(|a) = <nabl2--G-refs> (<nabl2--sol-g> a, <id>)

  /**
   * Get direct edges from a scope
   *
   * @type Scope -> List((Label,Scope))
   */
  nabl2-get-scope-direct-edges(|a) = <nabl2--G-direct-edges> (<nabl2--sol-g> a, <id>)

  /**
   * Get named (import) edges from a scope
   *
   * @type Scope -> List((Label,Occurrence))
   */
  nabl2-get-scope-named-edges(|a) = <nabl2--G-named-edges> (<nabl2--sol-g> a, <id>)

  /**
   * Get associated scopes of a declaration
   *
   * @type decl:Occurrence -> List((Label,Scope))
   */
  nabl2-get-decl-assocs(|a) = <nabl2--G-assocs> (<nabl2--sol-g> a, <id>)

  /**
   * Get occurrences associated with a scope
   *
   * @type Scope -> List((Occurrence,Label))
   */
  nabl2-get-scope-assocs(|a) = <nabl2--G-scope-assocs> (<nabl2--sol-g> a, <id>)

  /**
   * Make an occurrence in the default namespace
   *
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence = nabl2--mk-occurrence

  /**
   * Make an occurrence in the specified namespace
   *
   * @param ns : String
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns) = nabl2--mk-occurrence(|ns)

  /**
   * Make an occurrence in the specified namespace, using an origin term
   *
   * @param ns : String
   * @param t : Term
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns,t) = nabl2--mk-occurrence(|ns,t)

  /**
   * Get namespace of an occurrence
   *
   * @type Occurrence -> Namespace
   */
  nabl2-get-occurrence-ns = nabl2--occurrence-ns

  /**
   * Get name of an occurrence
   *
   * @type Occurrence -> Term
   */
  nabl2-get-occurrence-name = nabl2--occurrence-name

  
rules // ###### Editor Integration ######

  /**
   * Editor resolve references integration
   *
   * @type (node, position, ast, path, project-path) -> decl
   */
  nabl2-editor-resolve = nabl2--editor-resolve

  /**
   * Editor hover integration
   *
   * @type (node, position, ast, path, project-path) -> label
   */
  nabl2-editor-hover = nabl2--editor-hover
  
