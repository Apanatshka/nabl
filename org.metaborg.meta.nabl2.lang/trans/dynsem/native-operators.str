module dynsem/native-operators

imports

  libjava-front
  dynsem/-
  signatures/rules/-
  signatures/signatures/-

rules

  generate-java-operators(|native-pkg,term-pkg,native-dir):
    ast@Module(name,_) -> [params-result*,type-result*,init-result*]
    with params-result* := <collect-om(cgen-sig-to-params-java(|native-pkg,term-pkg,native-dir))> ast;
         type-result* := <collect-om(cgen-sig-to-type-java(|native-pkg,term-pkg,native-dir))> ast;
         init-result* := <collect-one(init-to-java(|native-pkg,term-pkg,native-dir))<+![]> ast

  cgen-sig-to-params-java(|native-pkg,term-pkg,native-dir):
    CGenSig(Name(name), sort, param*, _) -> (filename, source)
    with src-sort := <sort-to-ds> sort;
         src-name := <ds-sort-to-string> src-sort;
         target-name := <param-sorts-to-ds;ds-sort-to-string> param*;
         op-name := <cgen-op-name(|name,src-sort)> "paramsOf";
         (class-name, java-ast) := <metadata-java> (native-pkg, term-pkg, op-name, src-name, "PARAMS_METADATA", target-name);
         filename := $[[native-dir]/[class-name].java];
         source := <pp-java-string> java-ast

  cgen-sig-to-type-java(|native-pkg,term-pkg,native-dir):
    CGenSig(Name(name), sort, _, Type(tsort)) -> (filename, source)
    with type-sort := <sort-to-ds> tsort;
         src-sort := <sort-to-ds> sort;
         src-name := <ds-sort-to-string> src-sort;
         target-name := <ds-sort-to-string> type-sort;
         op-name := <cgen-op-name(|name,src-sort)> "typeOf";
         (class-name, java-ast) := <metadata-java> (native-pkg, term-pkg, op-name, src-name, "TYPE_METADATA", target-name);
         filename := $[[native-dir]/[class-name].java];
         source := <pp-java-string> java-ast

  metadata-java: (native-pkg, term-pkg, op-name, src-name, metadata-name, target-name) -> (class-name, compilation-unit |[
    package ~x:native-pkg;

    import ~x:term-pkg.*;
    import org.metaborg.meta.lang.dynsem.interpreter.DynSemRunner;
    import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
    import org.metaborg.scopegraph.context.IScopeGraphUnit;
    import org.metaborg.scopegraph.indices.TermIndex;
    import org.metaborg.spoofax.core.context.scopegraph.ISpoofaxScopeGraphContext;
    import org.spoofax.interpreter.terms.IStrategoTerm;

    import com.oracle.truffle.api.dsl.NodeChild;
    import com.oracle.truffle.api.dsl.Specialization;
    import com.oracle.truffle.api.source.SourceSection;

    @NodeChild(value = "term", type = TermBuild.class)
    public abstract class ~x:class-name extends TermBuild {

        public ~x:class-name(SourceSection source) {
            super(source);
        }

        @Specialization
        public ~x:target-name doGet(~x:src-name term) {
            ISpoofaxScopeGraphContext<?> context =
              (ISpoofaxScopeGraphContext<?>) getContext().readProperty(DynSemRunner.SPOOFAX_CONTEXT_PROP, null);
            TermIndex index = TermIndex.get(term.getStrategoTerm());
            IScopeGraphUnit unit = context.unit(index.resource());
            IStrategoTerm key = (IStrategoTerm) getContext().readProperty(DynSemRunner.~x:metadata-name, null);
            IStrategoTerm result = unit.astMetadata().get(index, key);
            return ~x:target-name.create(result);
        }

        public static TermBuild create(SourceSection source, TermBuild term) {
            return ~x:nodegen-name.create(source, term);
        }

    }
  ]|)
  with class-name := $[[op-name]_1];
       nodegen-name := $[[class-name]NodeGen]

  init-to-java(|native-pkg,term-pkg,native-dir):
    CGenInitRule(_, _, _) -> [(g-filename, g-source),
                              (r-filename, r-source),
                              (ot-filename, ot-source),
                              (i-filename, i-source)]
    with (g-class-name, g-ast) := <scopegraph-operator> (native-pkg, term-pkg);
         g-filename := $[[native-dir]/[g-class-name].java];
         g-source := <pp-java-string> g-ast;
         (r-class-name, r-ast) := <nameresolution-operator> (native-pkg, term-pkg);
         r-filename := $[[native-dir]/[r-class-name].java];
         r-source := <pp-java-string> r-ast;
         (i-class-name, i-ast) := <index-operator> (native-pkg, term-pkg);
         i-filename := $[[native-dir]/[i-class-name].java];
         i-source := <pp-java-string> i-ast;
         (ot-class-name, ot-ast) := <otypes-operator> (native-pkg, term-pkg);
         ot-filename := $[[native-dir]/[ot-class-name].java];
         ot-source := <pp-java-string> ot-ast

  scopegraph-operator: (native-pkg, term-pkg) -> (class-name, compilation-unit |[
    package ~x:native-pkg;

    import ~x:term-pkg.*;
    import org.metaborg.meta.lang.dynsem.interpreter.DynSemRunner;
    import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
    import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
    import org.metaborg.scopegraph.context.IScopeGraphUnit;
    import org.metaborg.scopegraph.indices.TermIndex;
    import org.metaborg.spoofax.core.context.scopegraph.ISpoofaxScopeGraphContext;
    import org.spoofax.interpreter.terms.IStrategoTerm;

    import com.oracle.truffle.api.dsl.NodeChild;
    import com.oracle.truffle.api.dsl.Specialization;
    import com.oracle.truffle.api.source.SourceSection;

    @NodeChild(value = "term", type = TermBuild.class)
    public abstract class ~x:class-name extends TermBuild
    {
      public ~x:class-name(SourceSection source)
      {
        super(source);
      }

      @Specialization public IScopeGraphTerm doGet(ITerm term)
      {
        ISpoofaxScopeGraphContext<?> context =
            (ISpoofaxScopeGraphContext<?>)getContext().readProperty(DynSemRunner.SPOOFAX_CONTEXT_PROP, null);
        TermIndex index = TermIndex.get(term.getStrategoTerm());
        IScopeGraphUnit unit = context.unit(index.resource());
        IStrategoTerm scopeGraph = unit.scopeGraph().strategoTerm();
        return IScopeGraphTerm.create(scopeGraph);
      }

      public static TermBuild create(SourceSection source, TermBuild term)
      {
        return ~x:nodegen-name.create(source, term);
      }
    }
  ]|)
  with class-name := "nabl2_scopeGraph_1";
       nodegen-name := $[[class-name]NodeGen]

  nameresolution-operator: (native-pkg, term-pkg) -> (class-name, compilation-unit |[
    package ~x:native-pkg;

    import ~x:term-pkg.*;
    import org.metaborg.meta.lang.dynsem.interpreter.DynSemRunner;
    import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
    import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
    import org.metaborg.scopegraph.context.IScopeGraphUnit;
    import org.metaborg.scopegraph.indices.TermIndex;
    import org.metaborg.spoofax.core.context.scopegraph.ISpoofaxScopeGraphContext;
    import org.spoofax.interpreter.terms.IStrategoTerm;

    import com.oracle.truffle.api.dsl.NodeChild;
    import com.oracle.truffle.api.dsl.Specialization;
    import com.oracle.truffle.api.source.SourceSection;

    @NodeChild(value = "term", type = TermBuild.class)
    public abstract class ~x:class-name extends TermBuild
    {
      public ~x:class-name(SourceSection source)
      {
        super(source);
      }

      @Specialization public List_Tuple_IOccurrenceTerm_Tuple_IOccurrenceTerm_List_IStepTerm doGet(ITerm term)
      {
        ISpoofaxScopeGraphContext<?> context =
            (ISpoofaxScopeGraphContext<?>)getContext().readProperty(DynSemRunner.SPOOFAX_CONTEXT_PROP, null);
        TermIndex index = TermIndex.get(term.getStrategoTerm());
        IScopeGraphUnit unit = context.unit(index.resource());
        IStrategoTerm nameResolution = unit.nameResolution().strategoTerm();
        return List_Tuple_IOccurrenceTerm_Tuple_IOccurrenceTerm_List_IStepTerm.create(nameResolution);
      }

      public static TermBuild create(SourceSection source, TermBuild term)
      {
        return ~x:nodegen-name.create(source, term);
      }
    }
  ]|)
  with class-name := "nabl2_nameResolution_1";
       nodegen-name := $[[class-name]NodeGen]

  index-operator: (native-pkg, term-pkg) -> (class-name, compilation-unit |[
    package ~x:native-pkg;

    import ~x:term-pkg.*;
    import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
    import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
    import org.metaborg.scopegraph.indices.TermIndex;

    import com.oracle.truffle.api.dsl.NodeChild;
    import com.oracle.truffle.api.dsl.Specialization;
    import com.oracle.truffle.api.source.SourceSection;

    @NodeChild(value = "term", type = TermBuild.class)
    public abstract class ~x:class-name extends TermBuild
    {
      public ~x:class-name(SourceSection source)
      {
        super(source);
      }

      @Specialization public ITermIndexTerm doGet(ITerm term)
      {
        TermIndex index = TermIndex.get(term.getStrategoTerm());
        return new TermIndex_2_Term(index.resource(), index.nodeId());
      }

      public static TermBuild create(SourceSection source, TermBuild term)
      {
        return ~x:nodegen-name.create(source, term);
      }
    }
  ]|)
  with class-name := "nabl2_indexOf_1";
       nodegen-name := $[[class-name]NodeGen]

  otypes-operator: (native-pkg, term-pkg) -> (class-name, compilation-unit |[
    package ~x:native-pkg;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map.Entry;

    import ~x:term-pkg.*;
    import org.metaborg.meta.lang.dynsem.interpreter.DynSemRunner;
    import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.TermBuild;
    import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
    import org.metaborg.scopegraph.context.IScopeGraphUnit;
    import org.metaborg.scopegraph.indices.TermIndex;
    import org.metaborg.spoofax.core.context.scopegraph.ISpoofaxScopeGraphContext;
    import org.spoofax.interpreter.terms.IStrategoTerm;

    import com.oracle.truffle.api.dsl.NodeChild;
    import com.oracle.truffle.api.dsl.Specialization;
    import com.oracle.truffle.api.source.SourceSection;

    @NodeChild(value = "term", type = TermBuild.class)
    public abstract class ~x:class-name extends TermBuild
    {
      public ~x:class-name(SourceSection source)
      {
        super(source);
      }

      @Specialization public List_Tuple_IOccurrenceTerm_ITypeTerm doGet(ITerm term)
      {
        ISpoofaxScopeGraphContext<?> context = (ISpoofaxScopeGraphContext<?>) getContext()
                .readProperty(DynSemRunner.SPOOFAX_CONTEXT_PROP, null);
        TermIndex index = TermIndex.get(term.getStrategoTerm());
        IScopeGraphUnit unit = context.unit(index.resource());
        List<Tuple_IOccurrenceTerm_ITypeTerm> tuples = new ArrayList<Tuple_IOccurrenceTerm_ITypeTerm>();
        for(Entry<IStrategoTerm, IStrategoTerm> entry : unit.occurrenceTypes().get()) {
            IOccurrenceTerm occurrence = IOccurrenceTerm.create(entry.getKey());
            ITypeTerm type = ITypeTerm.create(entry.getValue());
            tuples.add(new Tuple_IOccurrenceTerm_ITypeTerm(occurrence, type));
        }
        return new List_Tuple_IOccurrenceTerm_ITypeTerm((Tuple_IOccurrenceTerm_ITypeTerm[])tuples.toArray());
      }

      public static TermBuild create(SourceSection source, TermBuild term)
      {
        return ~x:nodegen-name.create(source, term);
      }
    }
  ]|)
  with class-name := "nabl2_occurrenceTypes_1";
       nodegen-name := $[[class-name]NodeGen]
