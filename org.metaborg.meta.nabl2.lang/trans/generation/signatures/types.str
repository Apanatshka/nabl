module generation/signatures/types

imports

  libstrc
  generation/-
  signatures/nabl2/shared/common/-
  signatures/common/-
  signatures/signatures/-
  util/stratego

rules

  signature-to-str:
    Types(typesig*) -> [
      Signature([Constructors([typedeclstr*])]),
      Rules(rule*)
    ]
    with typedeclstr* := <map(typesig-to-opdecl)> typesig*
    with rule* := <map(typesig-to-str)> typesig*

  typesig-to-opdecl:
    TypeSig(c,a*) -> OpDecl(c,sstr)
    where [] := a*
    with sstr := ConstType(<type-sort;sort-to-str>)
 
  typesig-to-opdecl:
    TypeSig(c,a*) -> OpDecl(c,FunType(astr*,sstr))
    where [_|_] := a*
    with sstr := ConstType(<type-sort;sort-to-str>);
         astr* := <map(Snd;sort-to-str;!ConstType(<id>))> a*

  typesig-to-str:
    TypeSig(c,a*) -> |[ nabl2--type-sig-of-hook: ~op -> ~args ]|
    with op := Op(c,<map(!Wld())> a*);
         args := List(<map(explode(term-to-term))> a*)

  sort-to-str: SortNoArgs(name) -> SortNoArgs(name)
  sort-to-str: ListSort(arg) -> Sort("List", [<sort-to-str> arg])
  sort-to-str: TupleSort(arg*) -> SortTuple(<map(sort-to-str)> arg*)
  sort-to-str: Var(name) -> Var(name)

  sort-to-str: ScopeSort() -> SortNoArgs("Scope") // FIXME Use NaBL2_ prefix
  sort-to-str: OccurrenceSort() -> SortNoArgs("Occurrence") // FIXME Use NaBL2_ prefix
  sort-to-str: TypeSort() -> SortNoArgs("Type") // FIXME Use NaBL2_ prefix



