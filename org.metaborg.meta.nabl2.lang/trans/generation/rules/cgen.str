module generation/rules/cgen

imports

  libstrc

  nabl2shared
 
  signatures/common/-
  signatures/rules/-

  generation/-
  util/stratego

rules

  section-to-str:
    Rules(rule*) -> Rules(rule-str*)
    with
      rule-str* := <map(rule-to-str)> rule*

  rule-to-str:
    CGenInitRule(params,type,clause*)
      -> RDefT(<rule-name> "init",[],[<source-var>],
           Rule(<term-var>, Tuple([<args-var>, <constraint-var>]), strclause*))
    with
      (str*,constraint) := <clauses-to-str> clause*;
      params-term := <explode(injection-to-term)> params;
      if Type(type') := type then
        type-term := <explode(injection-to-term)> type';
        args-str := |[ ~<args-var> := ParamsAndType(~params-term,~type-term) ]|;
        debug-str := Strat |[ if nabl2-debug-constraint-generation-hook then <concat-strings;debug> ["init ^ ",<pp-NaBL2-Term> ~params-term," : ",<pp-NaBL2-Term> ~type-term] end ]|
      else
        args-str := |[ ~<args-var> := Params(~params-term) ]|;
        debug-str := Strat |[ if nabl2-debug-constraint-generation-hook then <concat-strings;debug> ["init ^ ",<pp-NaBL2-Term> ~params-term] end ]|
      end;
      constraint-term := <constraint-to-term> constraint;
      constraint-str  := |[ ~<constraint-var> := ~constraint-term ]|;
      strclause* := [
        str*,
        With(args-str),
        With(constraint-str),
        With(debug-str)
      ]
 
  rule-to-str:
    CGenMatchRule(Name(name),pattern,params,type,clause*)
      -> RDefT(<rule-name> name,[],[<source-var>,<args-var>],
           Rule(pattern, <constraint-var>, strclause*))
    with
      (str*,constraint) := <clauses-to-str> clause*;
      params-pattern := As(<params-var>,<explode(injection-to-pattern)> params);
      if Type(type') := type then
        type-pattern := As(<type-var>,<explode(injection-to-pattern)> type');
        args-pattern := Term |[ ParamsAndType(~params-pattern,~type-pattern) ]|;
        args-str := |[
          ~args-pattern := ~<args-var>
        ]|;
        metadata-str := |[
          <nabl2--set-ast-params(|~<params-var>);
           nabl2--set-ast-type(|~<type-var>)> ~<term-var>
        ]|;
        debug-str := |[ if nabl2-debug-constraint-generation-hook then <concat-strings;debug> [~Str(name)," [[ ",<pp-NaBL2-Term> ~<term-var>," ]] ^ ",<pp-NaBL2-Term> ~<params-var>," : ",<pp-NaBL2-Term> ~<type-var>] end ]|
      else
        args-pattern := Term |[ Params(~params-pattern) ]|;
        args-str := |[
          ~args-pattern := ~<args-var>
        ]|;
        metadata-str := |[
          <nabl2--set-ast-params(|~<params-var>)> ~<term-var>
        ]|;
        debug-str := |[ if nabl2-debug-constraint-generation-hook then <concat-strings;debug> [~Str(name)," [[ ",<pp-NaBL2-Term> ~<term-var>," ]] ^ ",<pp-NaBL2-Term> ~<params-var>] end ]|
      end;
      args-string := Str(<pp-stratego-string> args-pattern);
      guarded-args-str := |[ ~args-str <+ fatal-err(|<concat-strings> ["Cannot match expected ",~args-string," with actual ",<pp-NaBL2-Term> ~<args-var>, "."]) ]|;
      constraint-term := <constraint-to-term> constraint;
      constraint-str  := |[ ~<constraint-var> := ~constraint-term ]|;
      strclause* := [
        With(guarded-args-str),
        With(debug-str),
        str*,
        With(constraint-str),
        With(metadata-str)
      ]
 
  rule-name =
    !$[nabl2--generate-constraint-[<id>]-rule]
 
rules

  clauses-to-str =
    partition(clause-to-str);
    (map(!With(<id>)),list-to-conj)

  clause-to-str:
    NewScopes(v*) -> str
    with str := <mapseq({\
                   v -> |[ ~v := <nabl2--new-scope(|~<source-var>)> ~n ]|
                   with n := Str(<var-name> v)
                 \})> v*
 
  clause-to-str:
    NewVars(v*) -> str
    with str := <mapseq({\
                   v -> |[ ~v := <nabl2--new-var(|~<source-var>)> ~n ]|
                   with n := Str(<var-name> v)
                 \})> v*

  clause-to-str:
    IndexSublist(list,sublist) -> str
    with str := |[ <nabl2--index-sublist(|~list)> ~sublist ]|

rules
 
  list-to-conj: [] -> CTrue()
  list-to-conj: [c] -> c 
  list-to-conj: [c|cs] -> CConj(c, <list-to-conj> cs) 
 
  constraint-to-term =
    explode(explode-guard)
 
  explode-guard(e) = injection-to-term(e)
  explode-guard(e) = cgenrecurse-to-term(e)

  cgenrecurse-to-term(e):
    CGenRecurse(Name(name),v,params,type) -> App(recurse-str,v)
    with
      params-term := <e> params;
      if Type(type') := type then
        type-term := <e> type';
        recurse-arg := Term |[ ParamsAndType(~params-term,~type-term) ]|
      else
        recurse-arg := Term |[ Params(~params-term) ]|
      end;
      recurse-str := CallT(SVar("nabl2--generate-constraint"),
          [SVar(<rule-name> name)],[<source-var>,recurse-arg])
