module rules/CGen

imports
 
  nabl2/shared/common/Identifiers
  nabl2/shared/common/Terms
  nabl2/shared/common/Types
  nabl2/shared/common/Vars
  nabl2/shared/constraints/Base

  common/Identifiers
  common/Types
  rules/Rules

template options

  keyword -/- [a-zA-Z0-9\']

context-free syntax

  Rule.CGenInitRule = <
    init <CGenParamsTerm> <CGenTypeTerm> :=
        <{RuleClause ","}+>.
  >

  Rule.CGenMatchRule = <
    <RuleName> [[ <Pattern> <CGenParamsPattern> <CGenTypePattern> ]] :=
        <{RuleClause ","}+>.
  >

  RuleClause = PrimitiveConstraint

  RuleClause = <(<Constraint>)>

  RuleClause.CGenRecurse = <<RuleName> [[ <TermVar> <CGenParamsTerm> <CGenTypeTerm> ]]>

  RuleClause.NewScopes   = <new <{TermVar " "}+>>

context-free syntax

  CGenParamsTerm.Tuple    = <^ (<{TypeTerm ","}*>)>

  CGenParamsPattern.Tuple = <^ (<{TermVarOrWld ","}*>)>

  CGenTypeTerm.NoType     =
  CGenTypeTerm.Type       = <: <TypeTerm>>

  CGenTypePattern.NoType  =
  CGenTypePattern.Type    = <: <TypePattern>>

lexical syntax

  Keyword        = "new"

 