module coq-semantics/scopes

imports
  signatures/NameBindingLanguage-sig
  generation/util
  coq-semantics/Coq
  coq-semantics/patterns

rules
    
  scope-to-coq(|c, pattern):
    ScopeClause([NamespaceRef(CurrentLanguage(), ns)]) -> ConsDecl($[[c]_scopes_[ns]], binder*, type)
    where
      (term, binder*, _, _) := <pattern-to-term(|0, None())> pattern
    with
      type :=
      Type(
        Apply(
	        Apply(
	          Ref("scopesR")
	        , term
	        )
	      , Ref($[[ns]NS])
	      )
	    )